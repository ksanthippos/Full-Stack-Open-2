{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","Notification","message","Footer","style","color","fontStyle","fontSize","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","conten","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"gOAkBeA,EAhBH,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBAEVC,EAAQF,EAAKG,UACb,wBACA,oBAEN,OACI,6BACI,wBAAIC,UAAU,QACTJ,EAAKK,QACN,4BAAQC,QAASL,GAAmBC,MCCrCK,EAXM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAGP,yBAAKJ,UAAU,SACVI,ICWEC,EAjBA,WASX,OACI,yBAAKC,MAPW,CAChBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKN,6BACA,kE,gBCMI,EAjBD,WAEX,OADgBC,IAAMC,IAHV,cAIGC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAe7B,EAZD,SAACC,GAEZ,OADgBL,IAAMM,KARV,aAQwBD,GAE/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SASnB,EAND,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAdJ,aAcI,YAAwBD,GAAMF,GAEzCH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCsFpBK,EA/FH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPC,EADO,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGgBJ,oBAAS,GAHzB,mBAGPK,EAHO,KAGEC,EAHF,OAI0BN,mBAAS,MAJnC,mBAIPO,EAJO,KAIOC,EAJP,KAOdC,qBAAU,WACNC,IAEKlB,MAAK,SAAAmB,GACFT,EAASS,QAElB,IAGH,IA6CMC,EAAcP,EACdJ,EACAA,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAEhC,OACI,6BACI,qCACA,kBAAC,EAAD,CAAcK,QAASuB,IACvB,6BACI,4BAAQzB,QAAS,kBAAMwB,GAAYD,KAAnC,QACUA,EAAU,YAAc,QAGtC,4BACKO,EAAYE,KAAI,SAACtC,EAAMuC,GAAP,OACb,kBAAC,EAAD,CACIC,IAAKD,EACLvC,KAAMA,EACNC,iBAAkB,kBA9CX,SAACoB,GACxB,IAAMrB,EAAOyB,EAAMgB,MAAK,SAAAC,GAAC,OAAIA,EAAErB,KAAOA,KAChCsB,EAAW,2BAAO3C,GAAP,IAAaG,WAAYH,EAAKG,YAE/C+B,EACYb,EAAIsB,GACX3B,MAAK,SAAA4B,GACFlB,EAASD,EAAMa,KAAI,SAAAtC,GAAI,OAAIA,EAAKqB,KAAOA,EACjCrB,EACA4C,SAETC,OAAM,SAAAC,GAEPd,EAAgB,QAAD,OACHhC,EAAK+C,OADF,sCAIfC,YAAW,WACPhB,EAAgB,QACjB,KACHN,EAASD,EAAMY,QAAO,SAAAK,GAAC,OAAIA,EAAErB,KAAOA,SA0BA4B,CAAmBjD,EAAKqB,WAI5D,0BAAM6B,SAnEE,SAACC,GACbA,EAAMC,iBACN,IAAMC,EAAa,CACfhD,QAASsB,EACT2B,MAAM,IAAIC,MAAOC,cACjBrD,UAAWsD,KAAKC,SAAW,IAG/BxB,EACYmB,GACPrC,MAAK,SAAA4B,GACFlB,EAASD,EAAMkC,OAAOf,IACtBhB,EAAW,SAwDX,2BACIgC,MAAOjC,EACPkC,SA7BS,SAACV,GACtBvB,EAAWuB,EAAMW,OAAOF,UA8BhB,4BAAQG,KAAK,UAAb,SAEJ,kBAAC,EAAD,Q,MC3FZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.73cc9c74.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note =({note, toggleImportance}) => {\r\n\r\n    const label = note.important\r\n        ? 'mark as not important'\r\n        : 'mark as important'\r\n\r\n    return (\r\n        <div>\r\n            <li className='note'>\r\n                {note.content}\r\n                <button onClick={toggleImportance}>{label}</button>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Note","import React from \"react\";\r\n\r\nconst Notification = ({message}) => {\r\n    if (message === null)\r\n        return null\r\n\r\n    return (\r\n        <div className='error'>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n\r\n    // Reactin tapa kirjoittaa CSS-tyyliä\r\n    const footerStyle = {\r\n        color: 'green',\r\n        fontStyle: 'italic',\r\n        fontSize: 16\r\n    }\r\n\r\n    return (\r\n        <div style={footerStyle}>\r\n            <br/>\r\n            <em>Note app (c) Mikael Rauhala 2020</em>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Footer","import axios from 'axios'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request\r\n        .then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request\r\n        .then(response => response.data)\r\n}\r\n\r\nexport default  { getAll, create, update }","// juuri\r\nimport React, {useEffect, useState} from \"react\";\r\nimport Note from \"./components/Note\";\r\nimport Notification from \"./components/Notification\";\r\nimport Footer from \"./components/Footer\";\r\nimport noteService from \"./services/notes\";\r\n\r\n\r\nconst App = () => {\r\n    const [notes, setNotes] = useState([])\r\n    const [newNote, setNewNote] = useState('')\r\n    const [showAll, setShowAll] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n    // get data\r\n    useEffect(() => {\r\n        noteService\r\n            .getAll()\r\n            .then(initialNotes => {\r\n                setNotes(initialNotes)\r\n            })\r\n    }, [])\r\n\r\n    // add data\r\n    const addNote = (event) => {\r\n        event.preventDefault()\r\n        const noteObject = {\r\n            content: newNote,\r\n            date: new Date().toISOString(),\r\n            important: Math.random() > 0.5,\r\n        }\r\n\r\n        noteService\r\n            .create(noteObject)\r\n            .then(returnedNote => {\r\n                setNotes(notes.concat(returnedNote))\r\n                setNewNote('')\r\n            })\r\n    }\r\n\r\n    // change data\r\n    const toggleImportanceOf = (id) => {\r\n        const note = notes.find(n => n.id === id)\r\n        const changedNote = {...note, important: !note.important}\r\n\r\n        noteService\r\n            .update(id, changedNote)\r\n            .then(returnedNote => {\r\n                setNotes(notes.map(note => note.id !== id\r\n                    ? note\r\n                    : returnedNote))\r\n            })\r\n            .catch(error => {\r\n            // oma virheviesti alertin sijaan\r\n            setErrorMessage(\r\n                `Note ${note.conten} was already removed from server!`\r\n            )\r\n            // näkyvissä 5 sek\r\n            setTimeout(() => {\r\n                setErrorMessage(null)\r\n            }, 5000)\r\n            setNotes(notes.filter(n => n.id !== id))\r\n        })\r\n    }\r\n\r\n    const handleNoteChange = (event) => {\r\n        setNewNote(event.target.value)\r\n    }\r\n\r\n    const notesToShow = showAll\r\n        ? notes\r\n        : notes.filter(note => note.important)\r\n\r\n    return (\r\n        <div>\r\n            <h1>Notes</h1>\r\n            <Notification message={errorMessage} />\r\n            <div>\r\n                <button onClick={() => setShowAll(!showAll)}>\r\n                    show {showAll ? 'important' : 'all' }\r\n                </button>\r\n            </div>\r\n            <ul>\r\n                {notesToShow.map((note, i) =>\r\n                    <Note\r\n                        key={i}\r\n                        note={note}\r\n                        toggleImportance={() => toggleImportanceOf(note.id)}\r\n                    />\r\n                )}\r\n            </ul>\r\n            <form onSubmit={addNote}>\r\n                <input\r\n                    value={newNote}\r\n                    onChange={handleNoteChange}\r\n                />\r\n                <button type=\"submit\">save</button>\r\n            </form>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from \"./App\";\nimport \"./index.css\"\n\n// OSA 2-4\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n\n\n"],"sourceRoot":""}